name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  AWS_REGION: eu-west-3
#  ECS_TASK_DEFINITION: task_definition.json
#  CONTAINER_NAME: demo-container5
#  ECS_SERVICE: demo-service-5
#  ECS_CLUSTER: demo-cluster-5
#  AWS_REPOSITORY: demo-repository

  AWS_ENVIRONMENT_NAME: Demo-jpa-env
  ARTIFACT_NAME: demo-web-jpa-beta
  ARTIFACT_VERSION: 0.0.1-SNAPSHOT

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: maven
    - name: Set up the Maven dependencies caching
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn -B clean package --file pom.xml

    - name: Upload JAR
      if: ${{ github.ref == 'refs/heads/main' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: target/${{ env.ARTIFACT_NAME }}-${{ env.ARTIFACT_VERSION }}.jar

  deploy:
    needs: build
    name: Deploy to EBS (AWS)
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Deploy to EBS
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.ARTIFACT_NAME }}
          environment_name: ${{ env.AWS_ENVIRONMENT_NAME }}
          version_label: ${{github.SHA}}
          use_existing_version_if_available: true
          region: ${{ env.AWS_REGION }}
          deployment_package: ${{ env.ARTIFACT_NAME }}-${{ env.ARTIFACT_VERSION }}.jar
          wait_for_deployment: true
          version_description: ${{github.SHA}}

      - name: Delete artifact
        if: always()
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}

#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ env.AWS_REGION }}
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#      with:
#        mask-password: true
#
#    - name: Build, tag, and push docker image to Amazon ECR
#      id: build-image
#      env:
#        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        REPOSITORY: ${{ env.AWS_REPOSITORY }}
#        IMAGE_TAG: ${{ github.sha }}
#      run: |
#        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: demo-task-definition
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: ${{ env.ECS_TASK_DEFINITION }}
#        container-name: ${{ env.CONTAINER_NAME }}
#        image: ${{ steps.build-image.outputs.image }}
#
#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.demo-task-definition.outputs.task-definition }}
#        service: ${{ env.ECS_SERVICE }}
#        cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
