name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  AWS_REGION: eu-west-3
#  ECS_TASK_DEFINITION: task_definition.json
#  CONTAINER_NAME: demo-container5
#  ECS_SERVICE: demo-service-5
#  ECS_CLUSTER: demo-cluster-5
#  AWS_REPOSITORY: demo-repository

  AWS_ENVIRONMENT_NAME: demo-web-jpa-beta-env
  ARTIFACT_NAME: demo-web-jpa-beta
  ARTIFACT_VERSION: 0.0.1-SNAPSHOT

jobs:
  build:
    name: Prepare Maven and build app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn -B clean package
      - name: Upload JAR 1
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
          path: target/${{ env.ARTIFACT_NAME }}-${{ env.ARTIFACT_VERSION }}.jar

  deploy:
    needs: build
    name: Deploy to EB (AWS)
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Deploy to EBS
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.ARTIFACT_NAME }}
          environment_name: ${{ env.AWS_ENVIRONMENT_NAME }}
          version_label: ${{github.SHA}}
          use_existing_version_if_available: true
          region: ${{ env.AWS_REGION }}
          deployment_package: ${{ env.ARTIFACT_NAME }}-${{ env.ARTIFACT_VERSION }}.jar

      - name: Delete artifact
        if: always()
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
